apply plugin: 'com.android.application'

android{
    compileSdkVersion ${compileSdkVersion}
    buildToolsVersion "${buildToolsVersion}"

    defaultConfig{
        applicationId "${applicationId}.${appPrefix}"
        minSdkVersion ${minSdkVersion}
        targetSdkVersion ${targetSdkVersion}
        versionCode ${versionCode}
        versionName "${versionName}"
        ndk{
            abiFilters ${abiFilters}
        }
        multiDexEnabled ${multiDexEnabled}
    }

    signingConfigs{
        debug {
            v2SigningEnabled ${v2SigningEnabled}
            keyAlias "${keyAlias}"
            keyPassword "${keyPassword}"
            storeFile file("../sig/${storeFile}")
            storePassword "${storePassword}"
        }
        release {
            v2SigningEnabled ${v2SigningEnabled}
            keyAlias "${keyAlias}"
            keyPassword "${keyPassword}"
            storeFile file("../sig/${storeFile}")
            storePassword "${storePassword}"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile project("${library}")
}


import com.android.build.gradle.api.ApplicationVariant
import com.android.build.gradle.internal.variant.ApplicationVariantData
import org.codehaus.groovy.runtime.StringGroovyMethods

import java.util.regex.Matcher
import java.util.regex.Pattern

private String getMergeResourcesTaskName(variant,scope){
    try{
        return variant.getMergeResources().name
    }catch(Exception ex){
        ex.printStackTrace()
    }
    return scope.getMergeResourcesTask().name
}

private def xml2AaptArg(packageId, xmlFile) {
    def result = new File(project.buildDir, "xml2AaptArg/$packageId/public.txt")
    if (!result.getParentFile().exists()) {
        result.getParentFile().mkdirs()
    }
    def sb = new StringBuilder()
    def nodes = new XmlParser().parse(xmlFile)
    nodes.each {
        sb.append("${packageId}:${it.@type}/${it.@name} = ${it.@id}\n")
    }
    result.write(sb.toString())
    return result.getAbsolutePath()
}

private void log(msg) {
    project.logger.error msg
}

private isTaskMatchVariant(Project project, ApplicationVariant variant) {
    Gradle gradle = project.getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    Pattern pattern

    if(tskReqStr.contains("assembleDebug") || tskReqStr.contains("assembleRelease")){
        return true
    }

    if (tskReqStr.contains("assemble")) {
        println tskReqStr
        pattern = Pattern.compile("assemble(\\w*)(Release|Debug)")
    } else {
        pattern = Pattern.compile("generate(\\w*)(Release|Debug)")
    }
    Matcher matcher = pattern.matcher(tskReqStr)
    if (matcher.find()) {
        String task = matcher.group(0)
        def flavors = matcher.group(1)
        def cName = StringGroovyMethods.capitalize(variant.name)
        def variantType = cName
        def equalsFlavor = true
        if (flavors) {
            if (flavors.length() < cName.length()) {
                equalsFlavor = flavors == cName.substring(0, flavors.length())
                variantType = cName.substring(flavors.length())
            }
        }
        def result = equalsFlavor && variantType == matcher.group(2)
        if(result)log("stableId will be start for current task $task")
        return result
    } else {
        return false
    }
}

afterEvaluate{
    def isAppPlugin = project.plugins.hasPlugin('com.android.application')
    if (isAppPlugin) {
        project.android.applicationVariants.each { ApplicationVariant variant ->
            if (!isTaskMatchVariant(project, variant)) {
                return
            }
            ApplicationVariantData variantData = variant.getVariantData()
            def scope = variantData.getScope()
            def prName = scope.getProcessResourcesTask().name
            def prTask = project.tasks.getByName(prName)
            def enableAapt2 = false
            try {
                enableAapt2 = prTask.isAapt2Enabled()
            } catch (Exception ex) {
                log(ex.getMessage())
            }

            def inXmlPath = "${project.android.sourceSets.main.res.srcDirs[0]}/values/public.xml"

            File inXmlFile
            if (!inXmlPath || !(inXmlFile = new File(inXmlPath)).exists()) {
                log('public.xml is not exist,so do nothing...')
            } else {
                log("public.xml path is $inXmlPath...")
                def aaptOpt = prTask.getAaptOptions()
                if (enableAapt2) {
                    log('aapt2 is enabled,set additional params !')
                    def resultPath = xml2AaptArg(variant.applicationId, inXmlFile)
                    aaptOpt.additionalParameters('--stable-ids', resultPath)
                } else {
                    log('aapt2 is disabled,hook merged resource task !')
                    def mrName = getMergeResourcesTaskName(variant,scope)//scope.getMergeResourcesTask().name
                    def mrTask = project.tasks.getByName(mrName)
                    mrTask.doLast {
                        def toDir = new File(mrTask.outputDir, "values")
                        project.copy {
                            int i = 0
                            from(inXmlFile.getParentFile()) {
                                include 'public.xml'
                                rename 'public.xml', (i++ == 0 ? "public.xml" : "public_${i}.xml")
                            }
                            into toDir
                        }
                    }
                }
            }
        }
    }
}


/*
afterEvaluate {
    for (variant in android.applicationVariants) {
        def scope = variant.getVariantData().getScope()
        String mergeTaskName = scope.getMergeResourcesTask().name
        def mergeTask = tasks.getByName(mergeTaskName)

        mergeTask.doLast {
            copy {
                int i = 0
                from(android.sourceSets.main.res.srcDirs) {
                    include 'values/public.xml'
                    rename 'public.xml', (i++ == 0 ? "public.xml" : "public_${i}.xml")
                }

                into(mergeTask.outputDir)
            }
        }
    }
}
*/